I">Ê<p><a href="../projects/aspera/index.html">Project Demo</a></p>

<h2 id="intro">Intro:</h2>

<p>I didn‚Äôt actually know what I wanted to make, except that it would be a game. Originally I wanted to make a cross between a platformer and a shooter, but I couldn‚Äôt think of how to spawn the enemies in a way that would be fun and yet easy to make. After I made the sprite for the player I realised that it kinda looked like diep.io, so I switched and decided to make that instead. I actually have some experience making games in js but it wasn‚Äôt entirely on my own, it was like an online course where they guided me through the developing process. So I just borrowed some main concepts from there to make my game.</p>

<p>The aim of the game is to survive as long as possible. Early-game is pretty easy, only a handful of enemies spawn. Once the score goes above 100, the game starts to get more intense. To help the player, every 50 points, the health of the bullet will increase by 1, allowing it to bounce off walls and pierce through enemies. The game will also not spawn enemies near the player. However, there is recoil and the player also bounces off the walls. This also prevents abuse of the game‚Äôs not spawning enemies near the player.</p>

<h2 id="code-environment">Code environment:</h2>

<p>I used mainly js for the game, and a little of HTML and CSS for the canvas. I chose to use js because it‚Äôs pretty easy to implement and test on different devices. Also it‚Äôs integrated with HTML and CSS so display-wise it isn‚Äôt that hard. To be honest, I never learnt any HTML or CSS but I barely used these two except to display the canvas, so it was pretty easy to just Google everything. For the IDE, I went with Repl.it because, well, I was kinda lazy to install an IDE on my computer so I just used a web-based one, and also it‚Äôs pretty easy to share the link to test on different devices.
***</p>

<h2 id="program-structure">Program Structure:</h2>
<ul>
  <li>Player
    <ul>
      <li>Represented by a circle and a rectangle</li>
      <li>Only object controlled by the user</li>
      <li>Shoots bullets on mouse click and handles reloading</li>
      <li>Direction of bullet is based on rotation of player</li>
      <li>Health of bullet is also handled here</li>
      <li>Contains <code class="highlighter-rouge">draw()</code> and <code class="highlighter-rouge">move()</code></li>
    </ul>
  </li>
  <li>Bullet
    <ul>
      <li>Represented by a small grey circle</li>
      <li>Bounces off walls</li>
      <li>Stores health</li>
      <li>Not much in here, most of it is handled either by World() or Player()</li>
      <li>Contains <code class="highlighter-rouge">draw()</code> and <code class="highlighter-rouge">move()</code></li>
    </ul>
  </li>
  <li>Enemy
    <ul>
      <li>Represented by circles, in red, yellow or purple, which give 1 point, 5 and 10 respectively</li>
      <li>Contains the overlap function that checks for overlaps with bullets and the player</li>
      <li>Randomises the colour and duration of colour change for each enemy</li>
      <li>Contains <code class="highlighter-rouge">draw()</code>, <code class="highlighter-rouge">move()</code> and <code class="highlighter-rouge">isOverlap()</code></li>
    </ul>
  </li>
  <li>Particle
    <ul>
      <li>Represented by a small square 2px wide</li>
      <li>Randomises dx, dy and lifespan</li>
      <li>Contains <code class="highlighter-rouge">draw()</code> and <code class="highlighter-rouge">move()</code></li>
    </ul>
  </li>
  <li>World
    <ul>
      <li>Manages global variables and updates all objects as well as canvas</li>
      <li>Renders each object on the ‚Äúcleared‚Äù canvas</li>
      <li>Handles spawning of enemies and particles and collisions between bullets, enemies and the player</li>
      <li>In summary it controls what the user sees and is the main interface</li>
      <li>Contains <code class="highlighter-rouge">init()</code>, <code class="highlighter-rouge">update()</code>, <code class="highlighter-rouge">spawn()</code>, <code class="highlighter-rouge">draw()</code>, <code class="highlighter-rouge">move()</code> and <code class="highlighter-rouge">kill()</code></li>
    </ul>
  </li>
  <li>Detection of <code class="highlighter-rouge">keydown</code> and <code class="highlighter-rouge">keyup</code>, <code class="highlighter-rouge">mousedown</code>, and the running of the animation loop.</li>
</ul>

<h2 id="code-runthrough">Code Runthrough</h2>

<h3 id="canvas">Canvas</h3>

<p>First, we call the canvas and set <code class="highlighter-rouge">canvas.width</code> and <code class="highlighter-rouge">canvas.height</code> to <code class="highlighter-rouge">window.innerWidth</code> and <code class="highlighter-rouge">window.innerHeight</code>. This allows for full screen gameplay. Next, we set var w and h to .width and .height so it is more convenient for us to refer to it later on in the game, such as checking for enemies hitting the walls and bouncing off.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//Canvas</span>
<span class="kd">var</span> <span class="nx">canvas</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">'</span><span class="s1">canvas</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">ctx</span> <span class="o">=</span> <span class="nx">canvas</span><span class="p">.</span><span class="nx">getContext</span><span class="p">(</span><span class="dl">'</span><span class="s1">2d</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">canvas</span><span class="p">.</span><span class="nx">width</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">innerWidth</span> <span class="o">-</span> <span class="mi">20</span><span class="p">;</span>
<span class="nx">canvas</span><span class="p">.</span><span class="nx">height</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">innerHeight</span> <span class="o">-</span> <span class="mi">20</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">w</span> <span class="o">=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nx">canvas</span><span class="p">.</span><span class="nx">width</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">h</span> <span class="o">=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nx">canvas</span><span class="p">.</span><span class="nx">height</span><span class="p">;</span>
</code></pre></div></div>
<hr />

<h3 id="mouse">Mouse</h3>

<p>We declare a new object, mouse, and set its x and y coordinates to 0. If the mouse moves on the canvas, we set the x-y coordinates in the array to the mouse‚Äôs x-y coordinates. We also check if the mouse is clicked or not.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//Mouse</span>
<span class="kd">var</span> <span class="nx">mouse</span> <span class="o">=</span> <span class="p">{</span> <span class="na">x</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="na">y</span><span class="p">:</span> <span class="mi">0</span> <span class="p">};</span>
<span class="nx">ctx</span><span class="p">.</span><span class="nx">canvas</span><span class="p">.</span><span class="nx">onmousemove</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">evt</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">mouse</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="nx">evt</span><span class="p">.</span><span class="nx">clientX</span><span class="p">;</span>
	<span class="nx">mouse</span><span class="p">.</span><span class="nx">y</span> <span class="o">=</span> <span class="nx">evt</span><span class="p">.</span><span class="nx">clientY</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">//Keeps track of whether the mouse is pressed down</span>
<span class="kd">var</span> <span class="nx">mouseDown</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
<span class="nx">ctx</span><span class="p">.</span><span class="nx">canvas</span><span class="p">.</span><span class="nx">onmousedown</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
	<span class="nx">mouseDown</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
<span class="p">}</span>
<span class="nx">ctx</span><span class="p">.</span><span class="nx">canvas</span><span class="p">.</span><span class="nx">onmouseup</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
	<span class="nx">mouseDown</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<hr />

<h3 id="start-page">Start page</h3>

<p>If <code class="highlighter-rouge">startGame</code> is false, we make the background black and render the text as shown below.</p>

<p><img src="https://lh5.googleusercontent.com/kwvxrGZ6T8aTE5ciQ5iHpMa2bMLogFwWv8ukF1HEPXKoyEegCKbMnpk7MV3ie7eFqy1ZyPRVAqbi17FAQalCCVJTDLVMUUpMcAYmPid7nRScmzPJISr9-n7hjVnYz_owN8P3M8Bn" alt="" /></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//Start game</span>
<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">startGame</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">ctx</span><span class="p">.</span><span class="nx">save</span><span class="p">();</span>
	<span class="nx">ctx</span><span class="p">.</span><span class="nx">fillRect</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">w</span><span class="p">,</span> <span class="nx">h</span><span class="p">);</span>
	<span class="nx">ctx</span><span class="p">.</span><span class="nx">textAlign</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">center</span><span class="dl">"</span><span class="p">;</span>
	<span class="nx">ctx</span><span class="p">.</span><span class="nx">textBaseline</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">middle</span><span class="dl">'</span><span class="p">;</span>
	<span class="nx">ctx</span><span class="p">.</span><span class="nx">fillStyle</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">white</span><span class="dl">'</span><span class="p">;</span>
	<span class="nx">ctx</span><span class="p">.</span><span class="nx">font</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">15pt sans-serif</span><span class="dl">"</span><span class="p">;</span>
	<span class="nx">ctx</span><span class="p">.</span><span class="nx">fillText</span><span class="p">(</span><span class="dl">"</span><span class="s2">Click to shoot</span><span class="dl">"</span><span class="p">,</span> <span class="nx">w</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span> <span class="nx">h</span> <span class="o">/</span> <span class="mi">2</span> <span class="o">-</span> <span class="mi">150</span><span class="p">);</span>
	<span class="nx">ctx</span><span class="p">.</span><span class="nx">fillText</span><span class="p">(</span><span class="dl">"</span><span class="s2">WASD to move</span><span class="dl">"</span><span class="p">,</span> <span class="nx">w</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span> <span class="nx">h</span> <span class="o">/</span> <span class="mi">2</span> <span class="o">-</span> <span class="mi">125</span><span class="p">);</span>
	<span class="nx">ctx</span><span class="p">.</span><span class="nx">fillText</span><span class="p">(</span><span class="dl">"</span><span class="s2">Avoid enemies</span><span class="dl">"</span><span class="p">,</span> <span class="nx">w</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span> <span class="nx">h</span> <span class="o">/</span> <span class="mi">2</span> <span class="o">-</span> <span class="mi">100</span><span class="p">);</span>
	<span class="nx">ctx</span><span class="p">.</span><span class="nx">fillText</span><span class="p">(</span><span class="dl">"</span><span class="s2">Press P to pause</span><span class="dl">"</span><span class="p">,</span> <span class="nx">w</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span> <span class="nx">h</span> <span class="o">/</span> <span class="mi">2</span> <span class="o">-</span> <span class="mi">75</span><span class="p">);</span>
	<span class="nx">ctx</span><span class="p">.</span><span class="nx">fillText</span><span class="p">(</span><span class="dl">"</span><span class="s2">and k to kill yourself</span><span class="dl">"</span><span class="p">,</span> <span class="nx">w</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span> <span class="nx">h</span> <span class="o">/</span> <span class="mi">2</span> <span class="o">-</span> <span class="mi">50</span><span class="p">);</span>
	<span class="nx">ctx</span><span class="p">.</span><span class="nx">fillText</span><span class="p">(</span><span class="dl">"</span><span class="s2">Red enemies give one point, </span><span class="dl">"</span><span class="p">,</span> <span class="nx">w</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span> <span class="nx">h</span> <span class="o">/</span> <span class="mi">2</span> <span class="o">-</span> <span class="mi">25</span><span class="p">);</span>
	<span class="nx">ctx</span><span class="p">.</span><span class="nx">fillText</span><span class="p">(</span><span class="dl">"</span><span class="s2">yellow, five and purple, ten</span><span class="dl">"</span><span class="p">,</span> <span class="nx">w</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span> <span class="nx">h</span> <span class="o">/</span> <span class="mi">2</span><span class="p">);</span>
	<span class="nx">ctx</span><span class="p">.</span><span class="nx">font</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">25pt sans-serif</span><span class="dl">"</span><span class="p">;</span>
	<span class="nx">ctx</span><span class="p">.</span><span class="nx">fillText</span><span class="p">(</span><span class="dl">"</span><span class="s2">Click and press B to begin</span><span class="dl">"</span><span class="p">,</span> <span class="nx">w</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span> <span class="nx">h</span> <span class="o">/</span> <span class="mi">2</span> <span class="o">+</span> <span class="mi">50</span><span class="p">);</span>
	<span class="nx">ctx</span><span class="p">.</span><span class="nx">restore</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>
<hr />

<h3 id="restart"><code class="highlighter-rouge">restart()</code></h3>

<p>This function, when called, sets <code class="highlighter-rouge">gameOver</code> to false and resets the player‚Äôs health and score to 5 and 0. The player goes back to the center and loses its velocity. The bullet‚Äôs health is reset to 0.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//Restart game</span>
<span class="nx">gameOver</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
<span class="nx">world</span><span class="p">.</span><span class="nx">player</span><span class="p">.</span><span class="nx">explode</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
<span class="nx">world</span><span class="p">.</span><span class="nx">player</span><span class="p">.</span><span class="nx">health</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
<span class="nx">world</span><span class="p">.</span><span class="nx">player</span><span class="p">.</span><span class="nx">score</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="nx">world</span><span class="p">.</span><span class="nx">player</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="nx">w</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
<span class="nx">world</span><span class="p">.</span><span class="nx">player</span><span class="p">.</span><span class="nx">y</span> <span class="o">=</span> <span class="nx">h</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
<span class="nx">world</span><span class="p">.</span><span class="nx">player</span><span class="p">.</span><span class="nx">vx</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="nx">world</span><span class="p">.</span><span class="nx">player</span><span class="p">.</span><span class="nx">vy</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="nx">bHealth</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</code></pre></div></div>

<h3 id="animation-loop">Animation loop</h3>

<p>A function called updateAll() handles the entire game‚Äôs animation. First, we check if the game isn‚Äôt paused and if the game has started, or if the game has ended. If the first two or the last one is true, then we update the world, and set a timeout that calls updateAll() again after 20 milliseconds.</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">pauseGame</span> <span class="o">&amp;&amp;</span> <span class="nx">startGame</span> <span class="o">||</span> <span class="nx">gameOver</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">world</span><span class="p">.</span><span class="nx">update</span><span class="p">();</span>
<span class="p">}</span>
<span class="nx">cmTID</span> <span class="o">=</span> <span class="nx">setTimeout</span><span class="p">(</span><span class="nx">updateAll</span><span class="p">,</span> <span class="nx">world</span><span class="p">.</span><span class="nx">timeStep</span><span class="p">);</span>
</code></pre></div></div>
<p>If gameOver is true, then we also draw the game over page, as shown below.</p>

<p><img src="https://lh3.googleusercontent.com/PTOBA-NAdxwd_FE2kpPtp7zGWsC4xWayuno3qU099nEB9iVuvhUPNd4DsSTL3JrB1lfG81_ef5N4cY6NRvHNfpkGClOcKVoQKKShG9KTH4Cz6RPqmV6T0VaH8hTB9N1k1BEfNEr0" alt="" /></p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="nx">gameOver</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">ctx</span><span class="p">.</span><span class="nx">save</span><span class="p">();</span>
	<span class="nx">ctx</span><span class="p">.</span><span class="nx">font</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">48pt sans-serif</span><span class="dl">'</span><span class="p">;</span>
	<span class="nx">ctx</span><span class="p">.</span><span class="nx">textAlign</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">center</span><span class="dl">'</span><span class="p">;</span>
	<span class="nx">ctx</span><span class="p">.</span><span class="nx">fillStyle</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">red</span><span class="dl">'</span><span class="p">;</span>
	<span class="nx">ctx</span><span class="p">.</span><span class="nx">textBaseline</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">middle</span><span class="dl">'</span><span class="p">;</span>
	<span class="nx">ctx</span><span class="p">.</span><span class="nx">fillText</span><span class="p">(</span><span class="dl">'</span><span class="s1">GAME OVER</span><span class="dl">'</span><span class="p">,</span> <span class="nx">w</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span> <span class="nx">h</span> <span class="o">/</span> <span class="mi">2</span><span class="p">);</span>
	<span class="nx">ctx</span><span class="p">.</span><span class="nx">font</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">15pt sans-serif</span><span class="dl">'</span><span class="p">;</span>
	<span class="nx">ctx</span><span class="p">.</span><span class="nx">fillText</span><span class="p">(</span><span class="dl">'</span><span class="s1">Highscore: </span><span class="dl">'</span> <span class="o">+</span> <span class="nx">localStorage</span><span class="p">.</span><span class="nx">getItem</span><span class="p">(</span><span class="dl">"</span><span class="s2">highscore</span><span class="dl">"</span><span class="p">),</span> <span class="nx">w</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span> <span class="nx">h</span> <span class="o">/</span> <span class="mi">2</span> <span class="o">+</span> <span class="mi">45</span><span class="p">);</span>
	<span class="nx">ctx</span><span class="p">.</span><span class="nx">font</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">12pt sans-serif</span><span class="dl">"</span><span class="p">;</span>
	<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">k</span><span class="p">)</span> <span class="p">{</span>
		<span class="nx">ctx</span><span class="p">.</span><span class="nx">fillText</span><span class="p">(</span><span class="dl">"</span><span class="s2">Died February 25, 2020. Google that.</span><span class="dl">"</span><span class="p">,</span> <span class="nx">w</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span> <span class="nx">h</span> <span class="o">/</span> <span class="mi">2</span> <span class="o">+</span> <span class="mi">70</span><span class="p">);</span>
	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
		<span class="nx">ctx</span><span class="p">.</span><span class="nx">fillText</span><span class="p">(</span><span class="dl">"</span><span class="s2">RIP Kazuhisa Hashimoto, 1958-2020.</span><span class="dl">"</span><span class="p">,</span> <span class="nx">w</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span> <span class="nx">h</span> <span class="o">/</span> <span class="mi">2</span> <span class="o">+</span> <span class="mi">70</span><span class="p">);</span>
	<span class="p">}</span>
	<span class="nx">ctx</span><span class="p">.</span><span class="nx">font</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">24pt sans-serif</span><span class="dl">'</span><span class="p">;</span>
	<span class="nx">ctx</span><span class="p">.</span><span class="nx">fillText</span><span class="p">(</span><span class="dl">'</span><span class="s1">Press R to restart</span><span class="dl">'</span><span class="p">,</span> <span class="nx">w</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span> <span class="nx">h</span> <span class="o">/</span> <span class="mi">2</span> <span class="o">+</span> <span class="mi">100</span><span class="p">);</span>
	<span class="nx">ctx</span><span class="p">.</span><span class="nx">restore</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />
<h3 id="world">World</h3>

<h4 id="initialising-the-world">Initialising the world:</h4>
<p>In the initialisation of the world, a new player is declared and assigned to the <code class="highlighter-rouge">Player()</code> object. Other global variables such as arrays for bullets, enemies and particles (basically anything that exists simultaneously in one frame) are also initialised in this phase. These variables represent every object present in a frame at any point of time. We don‚Äôt need to declare new variables for these as they are already called somewhere else in the code (e.g. bullets in <code class="highlighter-rouge">player.move</code>, enemies in <code class="highlighter-rouge">world.spawn</code> etc). They store the object instances which we can make use of for other functions discussed later.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">this</span><span class="p">.</span><span class="nx">init</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
	<span class="k">this</span><span class="p">.</span><span class="nx">player</span> <span class="o">=</span> <span class="k">new</span>  <span class="nx">Player</span><span class="p">();</span>
	<span class="k">this</span><span class="p">.</span><span class="nx">bullets</span> <span class="o">=</span> <span class="p">[];</span>
	<span class="k">this</span><span class="p">.</span><span class="nx">enemies</span> <span class="o">=</span> <span class="p">[];</span>
	<span class="k">this</span><span class="p">.</span><span class="nx">particles</span> <span class="o">=</span> <span class="p">[];</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="updating-the-world">Updating the world:</h4>

<p>This method runs through each of the four main methods in World, <code class="highlighter-rouge">spawn()</code>, <code class="highlighter-rouge">draw()</code>, <code class="highlighter-rouge">move()</code> and <code class="highlighter-rouge">kill()</code>. <code class="highlighter-rouge">spawn()</code> handles the spawning of enemies, <code class="highlighter-rouge">draw()</code> handles the clearing and drawing of canvas, <code class="highlighter-rouge">move()</code> handles the change in x-y coordinates for all objects and <code class="highlighter-rouge">kill()</code> handles bullet-enemy collisions, enemy-player collisions and player‚Äôs death, on which your score is saved as the new high score (if it is higher than the previous high score). The restart page is also included in <code class="highlighter-rouge">kill() </code>because it‚Äôs much more convenient for us.</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">this</span><span class="p">.</span><span class="nx">spawn</span><span class="p">();</span>
<span class="k">this</span><span class="p">.</span><span class="nx">draw</span><span class="p">();</span>
<span class="k">this</span><span class="p">.</span><span class="nx">move</span><span class="p">();</span>
<span class="k">this</span><span class="p">.</span><span class="nx">kill</span><span class="p">();</span>
</code></pre></div></div>
<p><code class="highlighter-rouge">spawn()</code>:</p>

<p>This method spawns enemies with randomized x-y coordinates and dx and dy values (can be negative), which x and y increment by. The spawning function is called depending on the number of enemies on-screen and the health of the player.</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">this</span><span class="p">.</span><span class="nx">spawn</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
<span class="c1">//Chance of enemy spawning</span>
<span class="kd">var</span> <span class="nx">chance</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">spawnChance</span><span class="p">;</span>

<span class="c1">//Difficulty of game</span>
<span class="kd">var</span> <span class="nx">difficulty</span> <span class="o">=</span> <span class="nx">world</span><span class="p">.</span><span class="nx">player</span><span class="p">.</span><span class="nx">score</span> <span class="o">/</span> <span class="mi">700</span><span class="p">;</span>
<span class="nx">chance</span> <span class="o">/=</span> <span class="k">this</span><span class="p">.</span><span class="nx">enemies</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</code></pre></div></div>
<p>The spawn location of the enemy is decided by four boolean values (0, 0), (0, 1), (1, 0) and (1, 1), with each value representing one side. Next, the dx and dy of the new enemy is randomised, which represents the direction the enemy moves in. This value is stored in the enemy as long as it exists. Lastly, if the enemy is not too close to the player, spawning will be successful and we will render a new enemy along the aforementioned coordinates with the corresponding dx and dy, which will enable the enemy to move around.</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//Determines spawn location</span>
<span class="kd">var</span> <span class="nx">c</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">();</span>
<span class="kd">var</span> <span class="nx">exey</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">();</span>
<span class="k">if</span> <span class="p">(</span><span class="nx">c</span> <span class="o">&lt;</span> <span class="mf">0.5</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">if</span> <span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="mi">3</span> <span class="o">&lt;</span> <span class="nx">chance</span> <span class="o">+</span> <span class="nx">difficulty</span> <span class="o">&amp;&amp;</span> <span class="k">this</span><span class="p">.</span><span class="nx">player</span><span class="p">.</span><span class="nx">health</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">||</span> <span class="k">this</span><span class="p">.</span><span class="nx">enemies</span><span class="p">.</span><span class="nx">length</span> <span class="o">&lt;=</span> <span class="mi">3</span> <span class="o">&amp;&amp;</span> <span class="k">this</span><span class="p">.</span><span class="nx">player</span><span class="p">.</span><span class="nx">health</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
		<span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">round</span><span class="p">(</span><span class="nx">exey</span><span class="p">)</span> <span class="o">*</span> <span class="nx">w</span><span class="p">;</span>
		<span class="kd">var</span> <span class="nx">y</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">round</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="nx">h</span><span class="p">)</span>
		<span class="kd">var</span> <span class="nx">dx</span> <span class="o">=</span> <span class="p">(</span><span class="nx">difficulty</span> <span class="o">+</span> <span class="mi">10</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">-</span> <span class="mf">0.5</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="nx">w</span> <span class="o">/</span> <span class="k">this</span><span class="p">.</span><span class="nx">frames</span> <span class="o">/</span> <span class="mi">7</span><span class="p">);</span>
		<span class="kd">var</span> <span class="nx">dy</span> <span class="o">=</span> <span class="p">(</span><span class="nx">difficulty</span> <span class="o">+</span> <span class="mi">10</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">-</span> <span class="mf">0.5</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="nx">w</span> <span class="o">/</span> <span class="k">this</span><span class="p">.</span><span class="nx">frames</span> <span class="o">/</span> <span class="mi">7</span><span class="p">);</span>
		<span class="k">if</span> <span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">y</span> <span class="o">-</span> <span class="nx">world</span><span class="p">.</span><span class="nx">player</span><span class="p">.</span><span class="nx">y</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">20</span><span class="p">)</span> <span class="p">{</span>
			<span class="k">this</span><span class="p">.</span><span class="nx">enemies</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span>  <span class="nx">Enemy</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">dx</span><span class="p">,</span> <span class="nx">dy</span><span class="p">));</span>
		<span class="p">}</span>
	<span class="p">}</span>
<span class="p">}</span> <span class="k">else</span>  <span class="k">if</span> <span class="p">(</span><span class="nx">c</span> <span class="o">&gt;=</span> <span class="mf">0.5</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">if</span> <span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">&lt;</span> <span class="nx">chance</span> <span class="o">+</span> <span class="nx">difficulty</span> <span class="o">&amp;&amp;</span> <span class="k">this</span><span class="p">.</span><span class="nx">player</span><span class="p">.</span><span class="nx">health</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">||</span> <span class="k">this</span><span class="p">.</span><span class="nx">enemies</span><span class="p">.</span><span class="nx">length</span> <span class="o">&lt;</span> <span class="nx">difficulty</span> <span class="o">*</span> <span class="mi">100</span> <span class="o">&amp;&amp;</span> <span class="k">this</span><span class="p">.</span><span class="nx">player</span><span class="p">.</span><span class="nx">health</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
	<span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="nx">w</span><span class="p">);</span>
	<span class="kd">var</span> <span class="nx">y</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">round</span><span class="p">(</span><span class="nx">exey</span><span class="p">)</span> <span class="o">*</span> <span class="nx">h</span><span class="p">;</span>
	<span class="kd">var</span> <span class="nx">dx</span> <span class="o">=</span> <span class="p">(</span><span class="nx">difficulty</span> <span class="o">+</span> <span class="mi">10</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">-</span> <span class="mf">0.5</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="nx">w</span> <span class="o">/</span> <span class="k">this</span><span class="p">.</span><span class="nx">frames</span> <span class="o">/</span> <span class="mi">7</span><span class="p">);</span>
	<span class="kd">var</span> <span class="nx">dy</span> <span class="o">=</span> <span class="p">(</span><span class="nx">difficulty</span> <span class="o">+</span> <span class="mi">10</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">-</span> <span class="mf">0.5</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="nx">w</span> <span class="o">/</span> <span class="k">this</span><span class="p">.</span><span class="nx">frames</span> <span class="o">/</span> <span class="mi">7</span><span class="p">);</span>
		<span class="k">if</span> <span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">x</span> <span class="o">-</span> <span class="nx">world</span><span class="p">.</span><span class="nx">player</span><span class="p">.</span><span class="nx">x</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">20</span><span class="p">)</span> <span class="p">{</span>
			<span class="k">this</span><span class="p">.</span><span class="nx">enemies</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span>  <span class="nx">Enemy</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">dx</span><span class="p">,</span> <span class="nx">dy</span><span class="p">));</span>
		<span class="p">}</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<h4 id="draw"><code class="highlighter-rouge">draw()</code>:</h4>

<p>This method resets the canvas by rendering a black screen over the previous frame. Next, it re-renders each of the objects at its new x-y coordinates. The order of rendering here is extremely important as the last one to be rendered will overlap the rest. Thus, we render the player last, as it should cover the bullets and particles. The enemies and bullets should also cover the particles, so we render them first. Bullets are smaller and faster than enemies so they are harder to notice, so we render them before the enemies. Lastly, the user‚Äôs focus should mainly be on the player, so it has to overlap the enemy.</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//Clear the canvas</span>
<span class="nx">ctx</span><span class="p">.</span><span class="nx">fillRect</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">w</span><span class="p">,</span> <span class="nx">h</span><span class="p">);</span>

<span class="c1">//Draw particles</span>
<span class="kd">var</span> <span class="nx">pl</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">particles</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
<span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">pl</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
	<span class="kd">var</span> <span class="nx">p</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">particles</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
	<span class="nx">p</span><span class="p">.</span><span class="nx">draw</span><span class="p">();</span>
<span class="p">}</span>

<span class="c1">//Draw bullets</span>
<span class="kd">var</span> <span class="nx">bl</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">bullets</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
<span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">bl</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
	<span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">bullets</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
	<span class="nx">b</span><span class="p">.</span><span class="nx">draw</span><span class="p">();</span>
<span class="p">}</span>

<span class="c1">//Draw enemies</span>
<span class="kd">var</span> <span class="nx">el</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">enemies</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
<span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">el</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
	<span class="kd">var</span> <span class="nx">e</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">enemies</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
	<span class="nx">e</span><span class="p">.</span><span class="nx">draw</span><span class="p">();</span>
<span class="p">}</span>

<span class="c1">//Draw player</span>
<span class="k">this</span><span class="p">.</span><span class="nx">player</span><span class="p">.</span><span class="nx">draw</span><span class="p">();</span>
</code></pre></div></div>
<h4 id="move"><code class="highlighter-rouge">move()</code>:</h4>

<p>This method runs through each object‚Äôs move() method and updates their x-y coordinates. We don‚Äôt redraw the objects here, we redraw them next frame in <code class="highlighter-rouge">draw()</code>.</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//Move player</span>
<span class="k">this</span><span class="p">.</span><span class="nx">player</span><span class="p">.</span><span class="nx">move</span><span class="p">();</span>
<span class="kd">var</span> <span class="nx">bl</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">bullets</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>

<span class="c1">//Move bullet</span>
<span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">bl</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
	<span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">bullets</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
	<span class="nx">b</span><span class="p">.</span><span class="nx">move</span><span class="p">();</span>
<span class="p">}</span>
<span class="kd">var</span> <span class="nx">el</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">enemies</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>

<span class="c1">//Move enemy</span>
<span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">el</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
	<span class="kd">var</span> <span class="nx">e</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">enemies</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
	<span class="nx">e</span><span class="p">.</span><span class="nx">move</span><span class="p">();</span>
<span class="p">}</span>

<span class="c1">//Move particles</span>
<span class="kd">var</span> <span class="nx">pl</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">particles</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
<span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">pl</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
	<span class="kd">var</span> <span class="nx">p</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">particles</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
	<span class="nx">p</span><span class="p">.</span><span class="nx">move</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>
<h4 id="kill"><code class="highlighter-rouge">kill()</code>:</h4>
<p>This section of the code checks for collisions between bullets and enemies. It runs through each instance of the enemy and bullet, and calls <code class="highlighter-rouge">Enemy.isOverlap(Bullet)</code>, and if the function returns true then it kills both the enemy and the bullet. It then does the same for the player.</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">l</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">enemies</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
<span class="c1">//Checks for bullet-enemy collision</span>
<span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">l</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
	<span class="kd">var</span> <span class="nx">e</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">enemies</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
	<span class="kd">var</span> <span class="nx">bl</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">bullets</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
	<span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="nx">bl</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
		<span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">bullets</span><span class="p">[</span><span class="nx">j</span><span class="p">];</span>
		<span class="k">if</span> <span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">isOverlap</span><span class="p">(</span><span class="nx">b</span><span class="p">))</span> <span class="p">{</span>
			<span class="nx">b</span><span class="p">.</span><span class="nx">health</span> <span class="o">-=</span> <span class="mi">1</span><span class="p">;</span>
			<span class="k">if</span> <span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">health</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
			<span class="nx">b</span><span class="p">.</span><span class="nx">dead</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
			<span class="p">}</span>
		<span class="nx">e</span><span class="p">.</span><span class="nx">health</span> <span class="o">-=</span> <span class="nx">b</span><span class="p">.</span><span class="nx">dmg</span><span class="p">;</span>
		<span class="p">}</span>
		<span class="k">if</span> <span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">health</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
			<span class="nx">e</span><span class="p">.</span><span class="nx">dead</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="c1">//Checks for player-enemy collision</span>
	<span class="k">if</span> <span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">isOverlap</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">player</span><span class="p">))</span> <span class="p">{</span>
		<span class="c1">//Bounce off the enemy</span>
		<span class="k">this</span><span class="p">.</span><span class="nx">player</span><span class="p">.</span><span class="nx">vx</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">dx</span><span class="p">;</span>
		<span class="k">this</span><span class="p">.</span><span class="nx">player</span><span class="p">.</span><span class="nx">vy</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">dy</span><span class="p">;</span>
		<span class="c1">//Kill enemy when it hits player</span>
		<span class="nx">e</span><span class="p">.</span><span class="nx">dead</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
		<span class="c1">//Decrease health by one</span>
		<span class="k">this</span><span class="p">.</span><span class="nx">player</span><span class="p">.</span><span class="nx">health</span> <span class="o">-=</span> <span class="mi">1</span><span class="p">;</span>
		<span class="c1">//Release some particles</span>
		<span class="kd">var</span> <span class="nx">pn</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="mi">3</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
		<span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">player</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span>
		<span class="kd">var</span> <span class="nx">y</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">player</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span>
		<span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">pn</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
			<span class="k">this</span><span class="p">.</span><span class="nx">particles</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span>  <span class="nx">Particle</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="dl">"</span><span class="s2">green</span><span class="dl">"</span><span class="p">));</span>
		<span class="p">}</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>If the player‚Äôs health is less than 0, we make it equal to 0. Usually more than one enemy hits the player on death, so this can solve that problem. If the player is dead, it should explode.</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//If health is less than 0, set it to 0, useful when more than one enemy hits player on death</span>
<span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">player</span><span class="p">.</span><span class="nx">health</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">this</span><span class="p">.</span><span class="nx">player</span><span class="p">.</span><span class="nx">health</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
<span class="c1">//Make player explode</span>
<span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">player</span><span class="p">.</span><span class="nx">explode</span> <span class="o">&amp;&amp;</span> <span class="k">this</span><span class="p">.</span><span class="nx">player</span><span class="p">.</span><span class="nx">opacity</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
	<span class="kd">var</span> <span class="nx">pn</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="mi">40</span> <span class="o">+</span> <span class="mi">10</span><span class="p">;</span>
	<span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">player</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span>
	<span class="kd">var</span> <span class="nx">y</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">player</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span>
	<span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">pn</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">this</span><span class="p">.</span><span class="nx">particles</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span>  <span class="nx">Particle</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="dl">"</span><span class="s2">green</span><span class="dl">"</span><span class="p">));</span>
	<span class="p">}</span>
	<span class="k">this</span><span class="p">.</span><span class="nx">player</span><span class="p">.</span><span class="nx">explode</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
	<span class="k">this</span><span class="p">.</span><span class="nx">player</span><span class="p">.</span><span class="nx">opacity</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">if</span> <span class="p">(</span><span class="nx">killPlayer</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">this</span><span class="p">.</span><span class="nx">player</span><span class="p">.</span><span class="nx">health</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p>If the player has run out of health, we kill all enemies and bullets, and run the above code to make the player explode. Next, we save the score locally if the score is higher than the current high score. Lastly, we check for restart, and set <code class="highlighter-rouge">killPlayer</code> to false.</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//Kill player and end game</span>
<span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">player</span><span class="p">.</span><span class="nx">health</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
	<span class="c1">//Make all objects explode</span>
	<span class="kd">var</span> <span class="nx">l</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">enemies</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
	<span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">l</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
		<span class="nx">e</span><span class="p">.</span><span class="nx">dead</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
	<span class="p">}</span>
	<span class="nx">l</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">bullets</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
	<span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">l</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
		<span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">bullets</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
		<span class="nx">b</span><span class="p">.</span><span class="nx">dead</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
	<span class="p">}</span>
	<span class="c1">//End the game</span>
	<span class="k">this</span><span class="p">.</span><span class="nx">player</span><span class="p">.</span><span class="nx">explode</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
	<span class="nx">gameOver</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
	<span class="c1">//Save highscore</span>
	<span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">player</span><span class="p">.</span><span class="nx">score</span> <span class="o">&gt;</span> <span class="nb">window</span><span class="p">.</span><span class="nx">localStorage</span><span class="p">.</span><span class="nx">getItem</span><span class="p">(</span><span class="dl">'</span><span class="s1">highscore</span><span class="dl">'</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">k</span><span class="p">)</span> <span class="p">{</span>
		<span class="nb">window</span><span class="p">.</span><span class="nx">localStorage</span><span class="p">.</span><span class="nx">setItem</span><span class="p">(</span><span class="dl">'</span><span class="s1">highscore</span><span class="dl">'</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">player</span><span class="p">.</span><span class="nx">score</span><span class="p">);</span>
	<span class="p">}</span>
	<span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">player</span><span class="p">.</span><span class="nx">restart</span> <span class="o">&amp;&amp;</span> <span class="k">this</span><span class="p">.</span><span class="nx">enemies</span><span class="p">.</span><span class="nx">length</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">this</span><span class="p">.</span><span class="nx">player</span><span class="p">.</span><span class="nx">restart</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
	<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">k</span><span class="p">)</span> <span class="p">{</span>
		<span class="nx">restart</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="nx">w</span> <span class="o">/</span> <span class="mi">100</span><span class="p">,</span> <span class="nx">w</span> <span class="o">/</span> <span class="nx">world</span><span class="p">.</span><span class="nx">frames</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mf">0.3</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">frames</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
		<span class="nx">konami</span><span class="p">();</span>
	<span class="p">}</span>
<span class="p">}</span>
<span class="nx">killPlayer</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</code></pre></div></div>
<p>This runs through each instance of the enemy and checks for dead enemies. If there is a dead enemy, we first check the colour of the enemy and add to the score accordingly. Then we explode the enemy and splice it from the array, absolutely obliterating it.</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//Kill enemy</span>
<span class="kd">var</span> <span class="nx">l</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">enemies</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
<span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="nx">l</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
	<span class="kd">var</span> <span class="nx">e</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">enemies</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
	<span class="k">if</span> <span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">dead</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">if</span> <span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">colour</span> <span class="o">==</span> <span class="dl">"</span><span class="s2">red</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
			<span class="nx">world</span><span class="p">.</span><span class="nx">player</span><span class="p">.</span><span class="nx">score</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
		<span class="p">}</span> <span class="k">else</span>  <span class="k">if</span> <span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">colour</span> <span class="o">==</span> <span class="dl">"</span><span class="s2">rgba(131, 123, 6, 1)</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
			<span class="nx">world</span><span class="p">.</span><span class="nx">player</span><span class="p">.</span><span class="nx">score</span> <span class="o">+=</span> <span class="mi">5</span><span class="p">;</span>
		<span class="p">}</span> <span class="k">else</span>  <span class="k">if</span> <span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">colour</span> <span class="o">==</span> <span class="dl">"</span><span class="s2">rgba(67, 0, 96, 1)</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
			<span class="nx">world</span><span class="p">.</span><span class="nx">player</span><span class="p">.</span><span class="nx">score</span> <span class="o">+=</span> <span class="mi">10</span><span class="p">;</span>
		<span class="p">}</span>
		<span class="c1">//Make enemy explode</span>
		<span class="kd">var</span> <span class="nx">pn</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="mi">40</span> <span class="o">+</span> <span class="mi">10</span><span class="p">;</span>
		<span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span>
		<span class="kd">var</span> <span class="nx">y</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span>
		<span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="nx">pn</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
			<span class="k">this</span><span class="p">.</span><span class="nx">particles</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span>  <span class="nx">Particle</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">e</span><span class="p">.</span><span class="nx">colour</span><span class="p">));</span>
		<span class="p">}</span>
		<span class="c1">//Remove enemy from array</span>
		<span class="k">this</span><span class="p">.</span><span class="nx">enemies</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>This runs through each instance of the bullet, checking if it has died. If it has died, we splice it from the array and make it explode, completely destroying it.</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">l</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">bullets</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
<span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="nx">l</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
	<span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">bullets</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
	<span class="c1">//Kill bullet</span>
	<span class="k">if</span> <span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">dead</span><span class="p">)</span> <span class="p">{</span>
		<span class="c1">//Make bullet explode</span>
		<span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="nx">b</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span>
		<span class="kd">var</span> <span class="nx">y</span> <span class="o">=</span> <span class="nx">b</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span>
		<span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
			<span class="k">this</span><span class="p">.</span><span class="nx">particles</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span>  <span class="nx">Particle</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="dl">"</span><span class="s2">grey</span><span class="dl">"</span><span class="p">));</span>
		<span class="p">}</span>
		<span class="c1">//Remove bullet from array</span>
		<span class="k">this</span><span class="p">.</span><span class="nx">bullets</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>This runs through each instance of the particle, checking if it has died. If it has died, we splice it from the array, totally devastating it.</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//Kill particle</span>
<span class="nx">l</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">particles</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
<span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="nx">l</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
	<span class="kd">var</span> <span class="nx">p</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">particles</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
	<span class="k">if</span> <span class="p">(</span><span class="nx">p</span><span class="p">.</span><span class="nx">dead</span><span class="p">)</span> <span class="p">{</span>
		<span class="c1">//Remove particle from array</span>
		<span class="k">this</span><span class="p">.</span><span class="nx">particles</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<h3 id="player">Player</h3>

<h4 id="draw-1"><code class="highlighter-rouge">draw()</code>:</h4>

<p>First we check if the player is dead. If it is dead, we need to destroy the player, so we simply set the opacity to 0, rendering the player invisible.</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//Opacity</span>
<span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">health</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">this</span><span class="p">.</span><span class="nx">opacity</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
	<span class="k">this</span><span class="p">.</span><span class="nx">opacity</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p>If it isn‚Äôt dead, we render a circle as well as a rectangle that sticks out of the front of the player and rotate the whole object. For aesthetic purposes, we fill both green.</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//Player is just a circle with a rectangle sticking out</span>
<span class="nx">ctx</span><span class="p">.</span><span class="nx">save</span><span class="p">();</span>
<span class="nx">ctx</span><span class="p">.</span><span class="nx">translate</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span>

<span class="c1">//Rotates the player</span>
<span class="nx">ctx</span><span class="p">.</span><span class="nx">rotate</span><span class="p">(</span><span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">angle</span> <span class="o">*</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span> <span class="o">/</span> <span class="mi">180</span><span class="p">);</span>

<span class="c1">//Renders the outline invisible</span>
<span class="nx">ctx</span><span class="p">.</span><span class="nx">strokeStyle</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">rgba(0, 0, 0, 0)</span><span class="dl">"</span><span class="p">;</span>

<span class="c1">//Draws the circle</span>
<span class="nx">ctx</span><span class="p">.</span><span class="nx">beginPath</span><span class="p">();</span>
<span class="nx">ctx</span><span class="p">.</span><span class="nx">arc</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">size</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">2</span> <span class="o">*</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="p">);</span>
<span class="nx">ctx</span><span class="p">.</span><span class="nx">stroke</span><span class="p">();</span>
<span class="nx">ctx</span><span class="p">.</span><span class="nx">fillStyle</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">rgba(50, 150, 50, </span><span class="dl">"</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">opacity</span><span class="p">;</span>
<span class="nx">ctx</span><span class="p">.</span><span class="nx">fill</span><span class="p">();</span>

<span class="c1">//Draws the rectangle</span>
<span class="nx">ctx</span><span class="p">.</span><span class="nx">fillRect</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">size</span> <span class="o">*</span> <span class="o">-</span><span class="mf">0.5</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">size</span> <span class="o">*</span> <span class="o">-</span><span class="mf">0.5</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">size</span> <span class="o">*</span> <span class="mf">2.5</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">size</span><span class="p">);</span>
<span class="nx">ctx</span><span class="p">.</span><span class="nx">restore</span><span class="p">();</span>
<span class="nx">Lastly</span><span class="p">,</span> <span class="nx">we</span> <span class="nx">draw</span> <span class="nx">the</span> <span class="nx">score</span> <span class="nx">and</span> <span class="nx">health</span> <span class="nx">at</span> <span class="nx">the</span> <span class="nx">top</span> <span class="nx">right</span> <span class="nx">corner</span> <span class="k">of</span> <span class="nx">the</span> <span class="nx">canvas</span><span class="p">.</span>

<span class="c1">//Displays score and health</span>
<span class="nx">ctx</span><span class="p">.</span><span class="nx">save</span><span class="p">();</span>
<span class="nx">ctx</span><span class="p">.</span><span class="nx">fillStyle</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">white</span><span class="dl">"</span><span class="p">;</span>
<span class="nx">ctx</span><span class="p">.</span><span class="nx">font</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">10pt Monaco</span><span class="dl">'</span><span class="p">;</span>
<span class="nx">ctx</span><span class="p">.</span><span class="nx">textAlign</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">center</span><span class="dl">'</span><span class="p">;</span>
<span class="nx">ctx</span><span class="p">.</span><span class="nx">textBaseline</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">middle</span><span class="dl">'</span><span class="p">;</span>
<span class="nx">ctx</span><span class="p">.</span><span class="nx">fillText</span><span class="p">(</span><span class="dl">"</span><span class="s2">Score = </span><span class="dl">"</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">score</span><span class="p">,</span> <span class="nx">w</span> <span class="o">*</span> <span class="p">(</span><span class="mi">9</span> <span class="o">/</span> <span class="mi">10</span><span class="p">),</span> <span class="nx">h</span> <span class="o">/</span> <span class="mi">16</span><span class="p">);</span>
<span class="nx">ctx</span><span class="p">.</span><span class="nx">fillText</span><span class="p">(</span><span class="dl">"</span><span class="s2">Health = </span><span class="dl">"</span> <span class="o">+</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">ceil</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">health</span><span class="p">),</span> <span class="nx">w</span> <span class="o">*</span> <span class="p">(</span><span class="mi">9</span> <span class="o">/</span> <span class="mi">10</span><span class="p">),</span> <span class="nx">h</span> <span class="o">/</span> <span class="mi">16</span> <span class="o">+</span> <span class="mi">20</span><span class="p">)</span>
<span class="nx">ctx</span><span class="p">.</span><span class="nx">restore</span><span class="p">();</span>
</code></pre></div></div>
<h4 id="move-1"><code class="highlighter-rouge">move()</code>:</h4>

<p>First, we rotate the player. We find the direction of the player by performing a bunch of mathematical equations which I found online and adapted for my player using trial and error. I actually don‚Äôt know why this works because firstly, radians to degrees is x / 180 * pi, and secondly, we already do that in this.draw(). I tried removing either one and swapping them but none of that worked, so :p.</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//Rotation</span>
<span class="kd">var</span> <span class="nx">diffX</span> <span class="o">=</span> <span class="nx">mouse</span><span class="p">.</span><span class="nx">x</span> <span class="o">-</span> <span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">diffY</span> <span class="o">=</span> <span class="nx">mouse</span><span class="p">.</span><span class="nx">y</span> <span class="o">-</span> <span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="o">-</span><span class="nb">Math</span><span class="p">.</span><span class="nx">atan2</span><span class="p">(</span><span class="nx">diffY</span><span class="p">,</span> <span class="nx">diffX</span><span class="p">);</span>
<span class="k">this</span><span class="p">.</span><span class="nx">angle</span> <span class="o">=</span> <span class="nx">a</span> <span class="o">/</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span> <span class="o">*</span> <span class="mi">180</span><span class="p">;</span>
</code></pre></div></div>
<p>Second, we add this.vx to this.x and this.vy to this.y, and multiply this.vx and this.vy by friction. Then, we check which direction to move in and move accordingly.</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//Movement</span>
<span class="k">this</span><span class="p">.</span><span class="nx">x</span> <span class="o">+=</span> <span class="k">this</span><span class="p">.</span><span class="nx">vx</span><span class="p">;</span>
<span class="k">this</span><span class="p">.</span><span class="nx">y</span> <span class="o">+=</span> <span class="k">this</span><span class="p">.</span><span class="nx">vy</span><span class="p">;</span>
<span class="k">this</span><span class="p">.</span><span class="nx">vx</span> <span class="o">*=</span> <span class="k">this</span><span class="p">.</span><span class="nx">friction</span><span class="p">;</span>
<span class="k">this</span><span class="p">.</span><span class="nx">vy</span> <span class="o">*=</span> <span class="k">this</span><span class="p">.</span><span class="nx">friction</span><span class="p">;</span>
<span class="c1">//Moving right</span>
<span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">right</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">this</span><span class="p">.</span><span class="nx">vx</span> <span class="o">+=</span> <span class="k">this</span><span class="p">.</span><span class="nx">moveSpeed</span><span class="p">;</span>
	<span class="k">this</span><span class="p">.</span><span class="nx">vx</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">maxMove</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">vx</span><span class="p">);</span>
<span class="p">}</span>
<span class="c1">//Moving left</span>
<span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">left</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">this</span><span class="p">.</span><span class="nx">vx</span> <span class="o">-=</span> <span class="k">this</span><span class="p">.</span><span class="nx">moveSpeed</span><span class="p">;</span>
	<span class="k">this</span><span class="p">.</span><span class="nx">vx</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">maxMove</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">vx</span><span class="p">);</span>
<span class="p">}</span>
<span class="c1">//Moving up</span>
<span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">up</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">this</span><span class="p">.</span><span class="nx">vy</span> <span class="o">-=</span> <span class="k">this</span><span class="p">.</span><span class="nx">moveSpeed</span><span class="p">;</span>
	<span class="k">this</span><span class="p">.</span><span class="nx">vy</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">maxMove</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">vy</span><span class="p">);</span>
<span class="p">}</span>
<span class="c1">//Moving down</span>
<span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">down</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">this</span><span class="p">.</span><span class="nx">vy</span> <span class="o">+=</span> <span class="k">this</span><span class="p">.</span><span class="nx">moveSpeed</span><span class="p">;</span>
	<span class="k">this</span><span class="p">.</span><span class="nx">vy</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">maxMove</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">vy</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>
<p>We also check if the player has hit a wall, and stop movement and bounce off accordingly.</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//Don't go further than the walls</span>
<span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span> <span class="o">&gt;</span> <span class="nx">w</span> <span class="o">-</span> <span class="k">this</span><span class="p">.</span><span class="nx">size</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">this</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="nx">w</span> <span class="o">-</span> <span class="k">this</span><span class="p">.</span><span class="nx">size</span><span class="p">;</span>
	<span class="k">this</span><span class="p">.</span><span class="nx">vx</span> <span class="o">-=</span> <span class="nx">pBounce</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">size</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">this</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">size</span><span class="p">;</span>
	<span class="k">this</span><span class="p">.</span><span class="nx">vx</span> <span class="o">+=</span> <span class="nx">pBounce</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">size</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">this</span><span class="p">.</span><span class="nx">y</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">size</span><span class="p">;</span>
	<span class="k">this</span><span class="p">.</span><span class="nx">vy</span> <span class="o">+=</span> <span class="nx">pBounce</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span> <span class="o">&gt;</span> <span class="nx">h</span> <span class="o">-</span> <span class="k">this</span><span class="p">.</span><span class="nx">size</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">this</span><span class="p">.</span><span class="nx">y</span> <span class="o">=</span> <span class="nx">h</span> <span class="o">-</span> <span class="k">this</span><span class="p">.</span><span class="nx">size</span><span class="p">;</span>
	<span class="k">this</span><span class="p">.</span><span class="nx">vy</span> <span class="o">-=</span> <span class="nx">pBounce</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p>Lastly, we enable shooting if this.reload is 0. We obtain the direction of the bullet by running some calculations. Next, we set the health of the bullet. This value will allow the bullet to hit more enemies and bounce off walls.</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//Shooting</span>
<span class="k">if</span> <span class="p">(</span><span class="nx">mouseDown</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">reload</span> <span class="o">&amp;&amp;</span> <span class="k">this</span><span class="p">.</span><span class="nx">health</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
	<span class="c1">//Direction of bullet</span>
	<span class="nx">a</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">angle</span> <span class="o">/</span> <span class="mi">180</span> <span class="o">*</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="p">;</span>
	<span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span>
	<span class="kd">var</span> <span class="nx">y</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span>
	<span class="kd">var</span> <span class="nx">vx</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">cos</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">bulletSpeed</span><span class="p">;</span>
	<span class="kd">var</span> <span class="nx">vy</span> <span class="o">=</span> <span class="o">-</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">bulletSpeed</span><span class="p">;</span>
	<span class="nx">bHealth</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">score</span> <span class="o">/</span> <span class="mi">50</span><span class="p">)</span> <span class="o">+</span> <span class="nx">oBHealth</span><span class="p">;</span>
	<span class="k">if</span> <span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">ceil</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">score</span> <span class="o">/</span> <span class="mi">50</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">5</span><span class="p">)</span> <span class="p">{</span>
		<span class="nx">bHealth</span> <span class="o">=</span> <span class="mi">5</span> <span class="o">+</span> <span class="nx">oBHealth</span><span class="p">;</span>
	<span class="p">}</span>
	<span class="c1">//Shoot the bullet</span>
	<span class="kd">var</span> <span class="nx">bullet</span> <span class="o">=</span> <span class="k">new</span>  <span class="nx">Bullet</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">vx</span><span class="p">,</span> <span class="nx">vy</span><span class="p">);</span>
	<span class="nx">world</span><span class="p">.</span><span class="nx">bullets</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">bullet</span><span class="p">);</span>
	<span class="c1">//Recoil</span>
	<span class="k">if</span> <span class="p">(</span><span class="nx">pRecoil</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">this</span><span class="p">.</span><span class="nx">vx</span> <span class="o">+=</span> <span class="o">-</span><span class="nx">vx</span> <span class="o">/</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">size</span> <span class="o">/</span> <span class="mi">2</span><span class="p">);</span>
		<span class="k">this</span><span class="p">.</span><span class="nx">vy</span> <span class="o">+=</span> <span class="o">-</span><span class="nx">vy</span> <span class="o">/</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">size</span> <span class="o">/</span> <span class="mi">2</span><span class="p">);</span>
	<span class="p">}</span>
	<span class="c1">//Start reload timer</span>
	<span class="k">this</span><span class="p">.</span><span class="nx">reload</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">reloadDelay</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">reload</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">this</span><span class="p">.</span><span class="nx">reload</span><span class="o">--</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<h3 id="bullet">Bullet</h3>
<h4 id="thisdraw"><code class="highlighter-rouge">this.draw</code>:</h4>

<p>This method draws a grey circle.</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">ctx</span><span class="p">.</span><span class="nx">save</span><span class="p">();</span>
<span class="nx">ctx</span><span class="p">.</span><span class="nx">translate</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span>
<span class="nx">ctx</span><span class="p">.</span><span class="nx">beginPath</span><span class="p">();</span>
<span class="nx">ctx</span><span class="p">.</span><span class="nx">arc</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">size</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">2</span> <span class="o">*</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="p">);</span>
<span class="nx">ctx</span><span class="p">.</span><span class="nx">stroke</span><span class="p">();</span>
<span class="nx">ctx</span><span class="p">.</span><span class="nx">fillStyle</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">grey</span><span class="dl">"</span><span class="p">;</span>
<span class="nx">ctx</span><span class="p">.</span><span class="nx">fill</span><span class="p">();</span>
<span class="nx">ctx</span><span class="p">.</span><span class="nx">restore</span><span class="p">();</span>
</code></pre></div></div>
<h4 id="thismove"><code class="highlighter-rouge">this.move</code>:</h4>

<p>This method updates the x-y coordinates of the bullet. Then, it checks if the bullet has hit the wall, and makes it bounce off, while subtracting one health. If its health is 0 or less, we kill it.</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">this</span><span class="p">.</span><span class="nx">x</span> <span class="o">+=</span> <span class="k">this</span><span class="p">.</span><span class="nx">vx</span><span class="p">;</span>
<span class="k">this</span><span class="p">.</span><span class="nx">y</span> <span class="o">+=</span> <span class="k">this</span><span class="p">.</span><span class="nx">vy</span><span class="p">;</span>
<span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">&lt;=</span> <span class="k">this</span><span class="p">.</span><span class="nx">size</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">this</span><span class="p">.</span><span class="nx">vx</span> <span class="o">=</span> <span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">vx</span><span class="p">;</span>
	<span class="k">this</span><span class="p">.</span><span class="nx">health</span> <span class="o">-=</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">size</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&gt;=</span> <span class="nx">w</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">this</span><span class="p">.</span><span class="nx">vx</span> <span class="o">=</span> <span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">vx</span><span class="p">;</span>
	<span class="k">this</span><span class="p">.</span><span class="nx">health</span> <span class="o">-=</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">&lt;=</span> <span class="k">this</span><span class="p">.</span><span class="nx">size</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">this</span><span class="p">.</span><span class="nx">vy</span> <span class="o">=</span> <span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">vy</span><span class="p">;</span>
	<span class="k">this</span><span class="p">.</span><span class="nx">health</span> <span class="o">-=</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">size</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&gt;=</span> <span class="nx">h</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">this</span><span class="p">.</span><span class="nx">vy</span> <span class="o">=</span> <span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">vy</span><span class="p">;</span>
	<span class="k">this</span><span class="p">.</span><span class="nx">health</span> <span class="o">-=</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">health</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">this</span><span class="p">.</span><span class="nx">dead</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<h3 id="enemy">Enemy</h3>

<h4 id="thisdraw-1"><code class="highlighter-rouge">this.draw</code>:</h4>

<p>When the enemy spawns, we draw a red circle.</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//Enemy starts as a red circle</span>
<span class="nx">ctx</span><span class="p">.</span><span class="nx">save</span><span class="p">();</span>
<span class="nx">ctx</span><span class="p">.</span><span class="nx">translate</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span>
<span class="nx">ctx</span><span class="p">.</span><span class="nx">strokeStyle</span> <span class="o">=</span> <span class="nx">colour</span><span class="p">;</span>
<span class="nx">ctx</span><span class="p">.</span><span class="nx">beginPath</span><span class="p">();</span>
<span class="nx">ctx</span><span class="p">.</span><span class="nx">arc</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">size</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">2</span> <span class="o">*</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="p">);</span>
<span class="nx">ctx</span><span class="p">.</span><span class="nx">stroke</span><span class="p">();</span>
<span class="nx">ctx</span><span class="p">.</span><span class="nx">fillStyle</span> <span class="o">=</span> <span class="nx">colour</span><span class="p">;</span>
<span class="nx">ctx</span><span class="p">.</span><span class="nx">fill</span><span class="p">();</span>
<span class="nx">ctx</span><span class="p">.</span><span class="nx">restore</span><span class="p">();</span>
</code></pre></div></div>
<h4 id="thismove-1"><code class="highlighter-rouge">this.move</code>:</h4>
<p>We increment the position of the enemy by the velocity.</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">this</span><span class="p">.</span><span class="nx">x</span> <span class="o">+=</span> <span class="k">this</span><span class="p">.</span><span class="nx">dx</span><span class="p">;</span>
<span class="k">this</span><span class="p">.</span><span class="nx">y</span> <span class="o">+=</span> <span class="k">this</span><span class="p">.</span><span class="nx">dy</span><span class="p">;</span>
</code></pre></div></div>
<p>Next, we change the colour of the enemy. We make a counter that starts with a random number and counts down. When it reaches 0, we change the colour of the enemy to red, yellow or purple.</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="nx">colourTime</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">colour</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">();</span>
	<span class="k">if</span> <span class="p">(</span><span class="nx">colour</span> <span class="o">&lt;=</span> <span class="mf">0.5</span><span class="p">)</span> <span class="p">{</span>
		<span class="nx">colourTime</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">*</span> <span class="nx">world</span><span class="p">.</span><span class="nx">frames</span><span class="p">;</span>
		<span class="nx">colourTime</span> <span class="o">*=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="mi">10</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
		<span class="nx">colour</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">red</span><span class="dl">"</span><span class="p">;</span>
		<span class="k">this</span><span class="p">.</span><span class="nx">colour</span> <span class="o">=</span> <span class="nx">colour</span><span class="p">;</span>
	<span class="p">}</span> <span class="k">else</span>  <span class="k">if</span> <span class="p">(</span><span class="nx">colour</span> <span class="o">&lt;=</span> <span class="mf">0.9</span><span class="p">)</span> <span class="p">{</span>
		<span class="nx">colourTime</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">*</span> <span class="nx">world</span><span class="p">.</span><span class="nx">frames</span><span class="p">;</span>
		<span class="nx">colourTime</span> <span class="o">*=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="mi">10</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
		<span class="nx">colour</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">rgba(131, 123, 6, 1)</span><span class="dl">"</span><span class="p">;</span>
		<span class="k">this</span><span class="p">.</span><span class="nx">colour</span> <span class="o">=</span> <span class="nx">colour</span><span class="p">;</span>
	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
		<span class="nx">colourTime</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">*</span> <span class="nx">world</span><span class="p">.</span><span class="nx">frames</span><span class="p">;</span>
		<span class="nx">colourTime</span> <span class="o">*=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="mi">10</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
		<span class="nx">colour</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">rgba(67, 0, 96, 1)</span><span class="dl">"</span><span class="p">;</span>
		<span class="k">this</span><span class="p">.</span><span class="nx">colour</span> <span class="o">=</span> <span class="nx">colour</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
	<span class="nx">colourTime</span><span class="o">--</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p>Here, we check if the enemy has hit a wall. If it has, we reverse the direction of the velocity that made the enemy hit the wall, instead of reversing both. This way, the enemy will reflect off the wall, rather than just bouncing off.</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//Bounce off the walls</span>
<span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span> <span class="o">&lt;=</span> <span class="k">this</span><span class="p">.</span><span class="nx">size</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">this</span><span class="p">.</span><span class="nx">dx</span> <span class="o">=</span> <span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">dx</span><span class="p">;</span>
	<span class="k">this</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">size</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">size</span> <span class="o">&gt;=</span> <span class="nx">w</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">this</span><span class="p">.</span><span class="nx">dx</span> <span class="o">=</span> <span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">dx</span><span class="p">;</span>
	<span class="k">this</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="nx">w</span> <span class="o">-</span> <span class="k">this</span><span class="p">.</span><span class="nx">size</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span> <span class="o">&lt;=</span> <span class="k">this</span><span class="p">.</span><span class="nx">size</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">this</span><span class="p">.</span><span class="nx">dy</span> <span class="o">=</span> <span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">dy</span><span class="p">;</span>
	<span class="k">this</span><span class="p">.</span><span class="nx">y</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">size</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">size</span> <span class="o">&gt;=</span> <span class="nx">h</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">this</span><span class="p">.</span><span class="nx">dy</span> <span class="o">=</span> <span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">dy</span><span class="p">;</span>
	<span class="k">this</span><span class="p">.</span><span class="nx">y</span> <span class="o">=</span> <span class="nx">h</span> <span class="o">-</span> <span class="k">this</span><span class="p">.</span><span class="nx">size</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<h4 id="thisisoverlapo2"><code class="highlighter-rouge">this.isOverlap(o2)</code>:</h4>

<p>We can assume that the parameter <code class="highlighter-rouge">o2 </code>has x-y coordinates and size. Then we do some calculations to check if <code class="highlighter-rouge">o1</code>, which is the enemy, has overlapped the object <code class="highlighter-rouge">o2</code>. If it has, we return true. If it hasn‚Äôt, we return false.</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">o1</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">dx</span> <span class="o">=</span> <span class="nx">o1</span><span class="p">.</span><span class="nx">x</span> <span class="o">-</span> <span class="nx">o2</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">dy</span> <span class="o">=</span> <span class="nx">o1</span><span class="p">.</span><span class="nx">y</span> <span class="o">-</span> <span class="nx">o2</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">s</span> <span class="o">=</span> <span class="p">(</span><span class="nx">o1</span><span class="p">.</span><span class="nx">size</span> <span class="o">+</span> <span class="nx">o2</span><span class="p">.</span><span class="nx">size</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">d</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="nx">dx</span> <span class="o">*</span> <span class="nx">dx</span> <span class="o">+</span> <span class="nx">dy</span> <span class="o">*</span> <span class="nx">dy</span><span class="p">);</span>
<span class="k">return</span> <span class="p">(</span><span class="nx">d</span> <span class="o">&lt;=</span> <span class="nx">s</span><span class="p">);</span>
</code></pre></div></div>
<h3 id="particles">Particles</h3>

<h4 id="thisdraw-2"><code class="highlighter-rouge">this.draw</code>:</h4>

<p>We draw a small square so it looks like a dot. For aesthetic purposes, we color it the same colour as the object that spawned it.</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//A particle is a dot with the object's colour</span>
<span class="nx">ctx</span><span class="p">.</span><span class="nx">save</span><span class="p">();</span>
<span class="nx">ctx</span><span class="p">.</span><span class="nx">translate</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span>
<span class="nx">ctx</span><span class="p">.</span><span class="nx">fillStyle</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">colour</span><span class="p">;</span>
<span class="nx">ctx</span><span class="p">.</span><span class="nx">fillRect</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">size</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">size</span><span class="p">);</span>
<span class="nx">ctx</span><span class="p">.</span><span class="nx">restore</span><span class="p">();</span>
</code></pre></div></div>
<h4 id="thismove-2"><code class="highlighter-rouge">this.move</code>:</h4>

<p>We increment the x-y coordinates by the direction, and bounce off the walls. If the lifespan of the particle is 0, we kill it.</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">this</span><span class="p">.</span><span class="nx">x</span> <span class="o">+=</span> <span class="k">this</span><span class="p">.</span><span class="nx">dx</span><span class="p">;</span>
<span class="k">this</span><span class="p">.</span><span class="nx">y</span> <span class="o">+=</span> <span class="k">this</span><span class="p">.</span><span class="nx">dy</span><span class="p">;</span>
<span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">size</span> <span class="o">&gt;=</span> <span class="nx">w</span> <span class="o">||</span> <span class="k">this</span><span class="p">.</span><span class="nx">x</span> <span class="o">-</span> <span class="k">this</span><span class="p">.</span><span class="nx">size</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">this</span><span class="p">.</span><span class="nx">dx</span> <span class="o">=</span> <span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">dx</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">size</span> <span class="o">&gt;=</span> <span class="nx">h</span> <span class="o">||</span> <span class="k">this</span><span class="p">.</span><span class="nx">y</span> <span class="o">-</span> <span class="k">this</span><span class="p">.</span><span class="nx">size</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">this</span><span class="p">.</span><span class="nx">dy</span> <span class="o">=</span> <span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">dy</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">life</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">this</span><span class="p">.</span><span class="nx">life</span><span class="o">--</span><span class="p">;</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
	<span class="k">this</span><span class="p">.</span><span class="nx">dead</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<h2 id="bugs">Bugs</h2>
<p>During the process of making the game, especially nearer to the start, I faced quite a few bugs that I didn‚Äôt know what caused, but nothing too buggy that a few tweaks didn‚Äôt fix.</p>

<p>Firstly, when I was making the player rotate, it was rotating the wrong way (back facing front and front facing back). I solved this temporarily by subtracting 300 radians from the angle of the player. This solution wasn‚Äôt optimal though, as the player wasn‚Äôt really facing the mouse. When I was looking through my code for this write-up, I realised that I forgot to make the angle negative.</p>

<p>Secondly, when I was writing the code for the enemies spawning, River noticed that the enemies spawned concentrated at the top left corner of the canvas. So, I made the enemies spawn randomly along the sides of the canvas, but I couldn‚Äôt figure out how to make them spawn at the top and bottom too. A few days later, River suggested that I first let the code decide whether to spawn at the top and bottom or at the sides, and then use the same spawn code for both, which was pretty clever actually.</p>

<p>Thirdly, when the player and enemy collide, I made it so they would both bounce off each other. However, my code was a little simple, and only worked if the player and enemy collide head-on. Thus, River suggested that I kill the enemy when it hits the player, which made things a lot simpler as I just needed to handle the player‚Äôs direction and not the enemy‚Äôs. Right now, the enemy‚Äôs velocity will add to the player‚Äôs velocity, but it still feels weird if the player runs into the enemy from behind. I may attempt to fix that if I think of a way to do so.</p>

<p>Fourthly, when I was adding the code for the player to explode when it dies, it would explode incessantly even after it had died. It was so bad that it caused my browser to crash :( I had to fix it immediately or my game would be unplayable. In the end, it proved pretty easy to fix. I just set it such that once it explodes, it would set the opacity to 0, and when it is at 0, it will not explode anymore.</p>

<p>Lastly, I wanted to include some way for the player to regenerate health. First, I tried making some enemies have a heal tag so when they die the player regenerates health. However, it was perhaps too effective, especially late-game, with many many enemies spawning at the same time. The player was basically invincible. When I tried lowering the chance for an enemy to carry the heal tag, it became so negligible that it wasn‚Äôt really that useful anymore. Thus, I got rid of that idea, and tried spawning in a healer that heals the player every 20 points or so. It actually sounded pretty cool, but was really difficult. I may consider adding that some day. Lastly, I made it such that the player heals every 100 points, similar to the healer. However, like before, it was too overpowered late-game, and the player became invincible. Thus, I tried making the player shoot multiple bullets per shot. At first, I made the bullets shoot horizontally, sort of like a shotgun but the bullets remain parallel. It was pretty easy to implement, but I realised that the player could just stay in a corner and become practically untouchable. Thus, I changed the power up to a burst shot, where the bullets lined up horizontally, and made the player lose health when touching the walls. Sometime after making this write-up, I thought ‚Äúhey, wouldn‚Äôt it be cool if the bullets bounced off the walls?‚Äù So I added a health value to the bullet, and when bouncing off walls or hitting enemies, the health would go down by one, with this value increasing every 50 points. At the same time, I got rid of the losing-health-when-touching-walls mechanism, and replaced it with a bounce-off-the-walls mechanism, which complemented my bullets bouncing off the walls.</p>
<h2 id="conclusion">Conclusion</h2>

<p>In conclusion, this game has been pretty enjoyable to make, and I also learnt a lot from it. For example, I learnt how to track the mouse‚Äôs location in the canvas, how to track <code class="highlighter-rouge">keydown</code> and <code class="highlighter-rouge">keyup</code>, the purpose of <code class="highlighter-rouge">setTimeout()</code> and why it is superior to just using a while loop, how to store data locally in the browser‚Äôs cache and even something as simple as just making the canvas fit the size of the window, and something as trivial as how <code class="highlighter-rouge">Math.random</code> obtains a random value which helped entertain me while I was stuck at something. I intend to keep updating the game with more game modes, maybe one where the player controls the enemies and the tank is controlled by the computer. Also, I am working on another game now, but it will probably take a much longer time to make. And you might want to try using the Konami code at the game over screen :)</p>
:ET